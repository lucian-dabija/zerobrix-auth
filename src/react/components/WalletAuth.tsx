'use client';

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Loader2 } from 'lucide-react';
import type { WalletAuthProps, User, UserDetails } from '../../types';
import { ZeroBrixAuth } from './ZeroBrixAuth';

import {
  Card,
  Input,
  Button,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from './ui';

export function WalletAuth({ onAuthenticated, config, onError }: WalletAuthProps) {
  const [isNewUser, setIsNewUser] = useState(false);
  const [loading, setLoading] = useState(false);
  const [userDetails, setUserDetails] = useState<UserDetails>({
    first_name: '',
    last_name: '',
    email: '',
    role: 'User'
  });
  const [walletAddress, setWalletAddress] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const handleUserDetailsChange = <K extends keyof UserDetails>(
    key: K,
    value: UserDetails[K]
  ) => {
    setUserDetails(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleAuthenticationSuccess = async (user: User, address: string) => {
    try {
      localStorage.setItem('wallet_address', address);
      onAuthenticated(user);

      if (config.refreshPageOnAuth) {
        window.location.reload();
      }
    } catch (error) {
      console.error('Error saving authentication:', error);
      setError('Failed to save authentication state');
      if (onError) {
        onError(error instanceof Error ? error : new Error('Authentication failed'));
      }
    }
  };

  const handleZeroBrixAuth = async (address: string) => {
    setLoading(true);
    setWalletAddress(address);
    setError(null);

    try {
      const response = await fetch('/api/users/active', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ wallet_address: address })
      });

      const data = await response.json();

      if (response.ok) {
        const formattedUser: User = {
          wallet_address: data.user.wallet_id,
          first_name: data.user.first_name || '',
          last_name: data.user.last_name || '',
          email: data.user.email || '',
          role: data.user.role || 'User',
          created_at: data.user.created_at
        };
        handleAuthenticationSuccess(formattedUser, address);
        return;
      } else if (response.status === 404) {
        setIsNewUser(true);
        setLoading(false);
        return;
      }

      throw new Error(data.error || 'Authentication failed');
    } catch (error) {
      console.error('Auth error:', error);
      setError(error instanceof Error ? error.message : 'Failed to connect to the server');
      if (onError) {
        onError(error instanceof Error ? error : new Error('Authentication failed'));
      }
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const createResponse = await fetch('/api/users/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          wallet_id: walletAddress,
          first_name: userDetails.first_name,
          last_name: userDetails.last_name,
          email: userDetails.email,
          role: userDetails.role
        })
      });

      if (!createResponse.ok) {
        throw new Error('Failed to create user profile');
      }

      const data = await createResponse.json();

      const user: User = {
        wallet_address: data.user.wallet_id,
        first_name: data.user.first_name,
        last_name: data.user.last_name,
        email: data.user.email,
        role: data.user.role,
        created_at: data.user.created_at
      };

      handleAuthenticationSuccess(user, walletAddress);
    } catch (error) {
      console.error('Registration error:', error);
      setError(error instanceof Error ? error.message : 'Failed to create account');
      if (onError) {
        onError(error instanceof Error ? error : new Error('Registration failed'));
      }
    } finally {
      setLoading(false);
    }
  };

  if (!isNewUser) {
    return (
      <ZeroBrixAuth
        onAuthenticated={handleZeroBrixAuth}
        config={config}
        onError={onError}
        stopPolling={isNewUser}
      />
    );
  }

  const {
    theme = { primary: 'blue', secondary: 'teal' },
    customStyles = {}
  } = config;

  return (
    <div className={`min-h-screen flex items-center justify-center bg-gradient-to-br from-${theme.primary}-50 via-${theme.secondary}-50 to-rose-50 dark:from-${theme.primary}-950 dark:via-${theme.secondary}-950 dark:to-rose-950 p-4 ${customStyles.container || ''}`}>
      {/* ZEROCAT Logo */}
      <div className="fixed bottom-4 right-4 w-32 h-14 opacity-70 hover:opacity-100 transition-opacity">
        <svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="1116" height="208">
          <path d="M0 0 C199.98 0 399.96 0 606 0 C606 68.64 606 137.28 606 208 C406.02 208 206.04 208 0 208 C0 199.75 0 191.5 0 183 C43.23 183 86.46 183 131 183 C131 178.05 131 173.1 131 168 C95.69 168 60.38 168 24 168 C27.68771666 163.08304446 31.37922449 158.19502631 35.1875 153.375 C36.14976393 152.15366501 37.1120028 150.93231028 38.07421875 149.7109375 C38.55938965 149.09573242 39.04456055 148.48052734 39.54443359 147.84667969 C41.86654846 144.90060843 44.18308355 141.95015994 46.5 139 C47.41663789 137.83331072 48.33330461 136.66664409 49.25 135.5 C49.70375 134.9225 50.1575 134.345 50.625 133.75 C59.33333333 122.66666667 68.04166667 111.58333333 76.75 100.5 C77.20366943 99.92258057 77.65733887 99.34516113 78.12475586 98.75024414 C79.04215009 97.5826959 79.95963067 96.41521551 80.87719727 95.24780273 C83.15844245 92.3451721 85.43821214 89.44140726 87.71484375 86.53515625 C92.40036092 80.55745998 97.11427313 74.60550483 101.875 68.6875 C106.84625321 62.50620874 111.68498345 56.23092278 116.46044922 49.8972168 C116.96592285 49.22988525 117.47139648 48.56255371 117.9921875 47.875 C118.48428711 47.215 118.97638672 46.555 119.48339844 45.875 C121 44 121 44 122.68066406 42.4375 C129.13371028 36.28808133 127.24661502 33.54738967 128 23 C86.09 23 44.18 23 1 23 C1 27.95 1 32.9 1 38 C34.99 38 68.98 38 104 38 C102.49962287 41.00075427 101.37960453 42.94421941 99.3125 45.43359375 C98.78398438 46.07554688 98.25546875 46.7175 97.7109375 47.37890625 C96.86402344 48.39791016 96.86402344 48.39791016 96 49.4375 C91.91794844 54.40069926 87.89160293 59.38587049 84 64.5 C79.71879744 70.11560336 75.2865719 75.59275315 70.81640625 81.05859375 C67.47393504 85.15607022 64.20594499 89.29479942 61 93.5 C56.71879744 99.11560336 52.2865719 104.59275315 47.81640625 110.05859375 C44.47393504 114.15607022 41.20594499 118.29479942 38 122.5 C33.721644 128.11186955 29.29270541 133.58565302 24.82519531 139.04760742 C21.39605182 143.25099197 18.03823043 147.49811826 14.75 151.8125 C5.72488313 163.62934697 5.72488313 163.62934697 1 169 C0.67 169 0.34 169 0 169 C0 113.23 0 57.46 0 0 Z M282 22 C282 75.13 282 128.26 282 183 C287.61 183 293.22 183 299 183 C299 166.17 299 149.34 299 132 C306.62406144 131.7742539 314.21666493 131.59925384 321.83935547 131.54833984 C324.42548633 131.51637244 327.01143768 131.45596098 329.59619141 131.36572266 C350.40986521 130.66738497 350.40986521 130.66738497 356.29244995 134.48947144 C360.09819402 138.13311709 362.63627918 142.36480779 364.99493408 147.04241943 C366.30931356 149.60245423 367.9335623 151.87067091 369.62890625 154.19140625 C370.60778904 155.64775363 371.58567975 157.10476841 372.5625 158.5625 C373.10511475 159.34407471 373.64772949 160.12564941 374.20678711 160.9309082 C376.83690255 164.72269325 379.32179506 168.50332742 381.5625 172.5390625 C384.96501248 178.491288 384.96501248 178.491288 390 183 C396.54896724 184.69192635 403.37740147 183.94886606 410 183 C407.03207011 177.56355151 403.66800214 172.61039475 400 167.625 C398.83903367 166.03314257 397.67889731 164.44067955 396.51953125 162.84765625 C395.93381348 162.04344238 395.3480957 161.23922852 394.74462891 160.41064453 C391.51724221 155.95119642 388.35854094 151.44348711 385.19628906 146.93774414 C381.65323508 141.89813755 378.02820543 136.92982633 374.328125 132.00390625 C373 130 373 130 373 128 C373.90621094 127.5875 374.81242187 127.175 375.74609375 126.75 C389.93767494 120.10605249 399.24111825 111.56682159 405.4375 96.8125 C409.34556841 83.90403161 409.17089278 66.091874 403 54 C402.57589844 53.13761719 402.15179688 52.27523437 401.71484375 51.38671875 C394.0264226 37.27343312 382.07419659 30.09305314 367.296875 25.078125 C339.86347735 18.19483613 308.7721684 22 282 22 Z M149 23 C149 75.8 149 128.6 149 183 C186.62 183 224.24 183 263 183 C263 178.05 263 173.1 263 168 C231.32 168 199.64 168 167 168 C167 148.53 167 129.06 167 109 C194.06 109 221.12 109 249 109 C249 104.05 249 99.1 249 94 C221.94 94 194.88 94 167 94 C167 75.52 167 57.04 167 38 C197.36 38 227.72 38 259 38 C259 33.05 259 28.1 259 23 C222.7 23 186.4 23 149 23 Z M442 47 C441.30003906 47.68707031 440.60007812 48.37414062 439.87890625 49.08203125 C424.94617209 64.77159014 418.54139837 86.0722602 419.05908203 107.43847656 C420.31170915 129.98576473 429.09189145 150.41123772 445.96484375 165.68359375 C460.3027603 177.6453457 478.24161646 185.21155656 497 186 C497.91136719 186.0515625 498.82273437 186.103125 499.76171875 186.15625 C523.71127002 186.877441 547.36388059 179.58158043 565.07421875 163.046875 C582.55190125 144.47019015 589.14485902 123.09322293 588.375 97.8125 C587.41387411 79.38291113 580.49470013 62.65527504 568 49 C567.11441406 47.97712891 567.11441406 47.97712891 566.2109375 46.93359375 C552.27872419 31.78601715 531.02199175 23.58594618 510.76171875 22.61328125 C483.91252396 21.90443723 461.54099374 27.7852332 442 47 Z " fill="#000000" transform="translate(0,0)" />
          <path d="M0 0 C2.47905334 2.20257899 4.83373109 4.44816732 7.1015625 6.8671875 C5.43693212 11.15361074 2.31080413 13.95335967 -0.8984375 17.1171875 C-1.445 17.67148437 -1.9915625 18.22578125 -2.5546875 18.796875 C-6.6450508 22.8671875 -6.6450508 22.8671875 -8.8984375 22.8671875 C-10.06121614 21.70440886 -11.22118518 20.53869134 -12.3671875 19.359375 C-24.45095806 7.58386389 -40.51415897 3.33213061 -57.02026367 3.44555664 C-73.00583464 3.95708141 -89.29473883 9.57823653 -100.8984375 20.8671875 C-113.66504828 35.49952629 -119.41202127 52.35502151 -118.10986328 71.81738281 C-116.41157177 88.28257397 -109.42775271 102.96043048 -96.8984375 113.8671875 C-80.62425289 126.10281524 -61.54954646 129.20823387 -41.63427734 126.56689453 C-28.4545987 124.00789188 -18.3384476 117.0819479 -8.8984375 107.8671875 C-3.23714319 112.56485725 1.95385154 117.61442122 7.1015625 122.8671875 C-4.70398392 138.27998421 -23.16839934 147.12049756 -42.10424805 149.90307617 C-66.8593665 153.05980653 -91.46543169 146.37264913 -111.24609375 131.11328125 C-127.35151511 117.47466964 -138.99593536 100.18769068 -141.8984375 78.8671875 C-143.70522868 53.5660749 -139.9424599 31.49413554 -123.80078125 11.234375 C-92.58621878 -24.76972352 -37.09720658 -31.05531626 0 0 Z " fill="#000000" transform="translate(769.8984375,39.1328125)" />
          <path d="M0 0 C0.87454834 0.00523682 1.74909668 0.01047363 2.65014648 0.01586914 C3.59438477 0.0190918 4.53862305 0.02231445 5.51147461 0.02563477 C6.50469727 0.03401367 7.49791992 0.04239258 8.52124023 0.05102539 C9.51833008 0.05553711 10.51541992 0.06004883 11.54272461 0.06469727 C14.01478872 0.07652532 16.48673541 0.0930069 18.95874023 0.11352539 C28.16760623 20.01440462 37.3544836 39.92429967 46.41210938 59.89453125 C47.02399122 61.24357819 47.63588902 62.5926179 48.24780273 63.94165039 C48.70125313 64.94138634 48.70125313 64.94138634 49.16386414 65.96131897 C52.74524019 73.8531172 56.35247161 81.73307997 59.95874023 89.61352539 C65.87133868 102.53505658 71.76562793 115.4647603 77.6328125 128.40698242 C80.51076506 134.75200813 83.40394562 141.08882763 86.34155273 147.40649414 C86.85999756 148.52451416 87.37844238 149.64253418 87.91259766 150.79443359 C88.87402133 152.86425521 89.84004631 154.93194824 90.81152344 156.99707031 C91.43933716 158.35022339 91.43933716 158.35022339 92.07983398 159.73071289 C92.44520264 160.51043457 92.81057129 161.29015625 93.18701172 162.09350586 C93.95874023 164.11352539 93.95874023 164.11352539 93.95874023 167.11352539 C86.03874023 167.11352539 78.11874023 167.11352539 69.95874023 167.11352539 C63.38073787 153.21002038 57.2116078 139.18247741 50.95874023 125.11352539 C22.57874023 124.78352539 -5.80125977 124.45352539 -35.04125977 124.11352539 C-36.03125977 127.08352539 -37.02125977 130.05352539 -38.04125977 133.11352539 C-39.19982535 135.90808109 -40.378668 138.67141688 -41.61547852 141.42993164 C-41.94417435 142.17186264 -42.27287018 142.91379364 -42.61152649 143.6782074 C-43.64675023 146.01254812 -44.68763855 148.34430992 -45.72875977 150.67602539 C-46.43812295 152.27286237 -47.14711063 153.86986623 -47.85571289 155.46704102 C-49.57921374 159.35146925 -51.31037782 163.23234731 -53.04125977 167.11352539 C-61.29125977 167.11352539 -69.54125977 167.11352539 -78.04125977 167.11352539 C-76.47724312 162.42147544 -74.73333753 158.05469914 -72.65454102 153.59399414 C-72.32100616 152.87136887 -71.98747131 152.14874359 -71.64382935 151.40422058 C-70.92519301 149.84801668 -70.20515667 148.29245866 -69.4838562 146.73748779 C-67.54612185 142.55977627 -65.61882129 138.37724914 -63.68969727 134.19555664 C-63.29670944 133.34449341 -62.90372162 132.49343018 -62.49882507 131.61657715 C-58.79341788 123.58837839 -55.13059817 115.54119984 -51.47875977 107.48852539 C-50.24861829 104.77743927 -49.01811171 102.06651909 -47.78735352 99.35571289 C-47.4819313 98.68298843 -47.17650909 98.01026398 -46.86183167 97.31715393 C-43.2697553 89.40918988 -39.65517356 81.51152682 -36.04125977 73.61352539 C-30.73504605 62.01594613 -25.44247982 50.41228157 -20.16625977 38.80102539 C-19.54240239 37.42862806 -18.91854176 36.0562322 -18.29467773 34.68383789 C-15.49522159 28.52406367 -12.7003694 22.36228791 -9.91625977 16.19555664 C-9.44687988 15.15761963 -8.9775 14.11968262 -8.49389648 13.05029297 C-7.63421683 11.1486588 -6.77635075 9.24620329 -5.9206543 7.34277344 C-5.55053223 6.52462158 -5.18041016 5.70646973 -4.79907227 4.86352539 C-4.32171631 3.80391602 -4.32171631 3.80391602 -3.8347168 2.72290039 C-2.56253096 0.14251607 -2.56253096 0.14251607 0 0 Z M7.95874023 30.11352539 C2.13320717 41.3642032 -2.9894144 52.87435827 -8.04125977 64.48852539 C-8.81696227 66.26471522 -9.59300253 68.04075758 -10.36938477 69.81665039 C-11.87905503 73.27068725 -13.38513876 76.72625529 -14.88891602 80.18286133 C-16.30128024 83.4259796 -17.72583937 86.66326028 -19.16235352 89.89575195 C-19.65517822 91.00861069 -19.65517822 91.00861069 -20.15795898 92.14395142 C-20.7724568 93.53019997 -21.38981142 94.91518693 -22.01049805 96.29867554 C-23.54178821 99.57991593 -23.54178821 99.57991593 -24.04125977 103.11352539 C-2.59125977 103.11352539 18.85874023 103.11352539 40.95874023 103.11352539 C39.27847578 98.05219015 39.27847578 98.05219015 37.26977539 93.18896484 C36.78695099 92.11779167 36.78695099 92.11779167 36.29437256 91.02497864 C35.94900452 90.26658188 35.60363647 89.50818512 35.24780273 88.72680664 C34.88309875 87.91946579 34.51839478 87.11212494 34.14263916 86.28031921 C32.95890305 83.66105323 31.77128058 81.04356845 30.58374023 78.42602539 C28.95228219 74.81851683 27.32281009 71.210112 25.69311523 67.60180664 C25.28886322 66.7075296 24.88461121 65.81325256 24.46810913 64.89187622 C20.8927952 56.97923692 17.35420263 49.05069713 13.83374023 41.11352539 C13.08084717 39.41643433 13.08084717 39.41643433 12.31274414 37.68505859 C11.19391651 35.16157877 10.07580563 32.63778567 8.95874023 30.11352539 C8.62874023 30.11352539 8.29874023 30.11352539 7.95874023 30.11352539 Z " fill="#000000" transform="translate(875.041259765625,20.886474609375)" />
          <path d="M0 0 C44.55 0 89.1 0 135 0 C135 7.26 135 14.52 135 22 C116.52 22 98.04 22 79 22 C79 69.85 79 117.7 79 167 C71.41 167 63.82 167 56 167 C56 119.15 56 71.3 56 22 C37.52 22 19.04 22 0 22 C0 14.74 0 7.48 0 0 Z " fill="#000000" transform="translate(959,21)" />
          <path d="M0 0 C6.55875 -0.04125 13.1175 -0.0825 19.875 -0.125 C21.90382324 -0.14320801 23.93264648 -0.16141602 26.02294922 -0.18017578 C65.32098449 -0.38541934 65.32098449 -0.38541934 80 12 C88.01051092 20.2966006 91.1179522 30.63235706 91 42 C90.18146046 52.68486429 86.25320819 61.82932105 78.3671875 69.1796875 C67.21608558 77.75462726 55.72261659 79.31751049 42.08984375 79.1953125 C40.48163757 79.19229126 40.48163757 79.19229126 38.84094238 79.18920898 C34.87308413 79.17882155 30.90528732 79.15089954 26.9375 79.125 C13.6034375 79.063125 13.6034375 79.063125 0 79 C0 52.93 0 26.86 0 0 Z " fill="#000000" transform="translate(299,38)" />
          <path d="M0 0 C3.59607108 2.76743431 6.8120012 5.77529726 10 9 C11.175625 10.14275391 11.175625 10.14275391 12.375 11.30859375 C25.31398152 24.61913386 29.5181781 40.6332418 29.42211914 58.78076172 C29.21452901 66.75358382 27.99970531 73.55245579 25 81 C24.59910156 82.0209375 24.19820312 83.041875 23.78515625 84.09375 C17.5055066 98.21841125 5.23812157 109.48320269 -8.75 115.8125 C-27.32302869 122.91536369 -48.14103575 123.33449683 -66.53515625 115.28515625 C-82.92668253 106.73870277 -95.15355816 93.76154525 -101 76.125 C-102.53339426 71.00841641 -103.73791123 66.32913838 -104 61 C-104.05027344 60.12472656 -104.10054688 59.24945313 -104.15234375 58.34765625 C-104.80590914 38.45312564 -97.15734203 21.73050696 -83.875 7.3125 C-62.03575643 -13.6261562 -25.24414607 -16.16921767 0 0 Z M-38 5 C-41.31524359 11.92940258 -43.60199616 18.70606102 -45.25 26.1875 C-45.41274414 26.92274902 -45.57548828 27.65799805 -45.74316406 28.41552734 C-50.81221424 52.55001785 -49.55099091 80.11544753 -40 103 C-39.34 103.99 -38.68 104.98 -38 106 C-34.98878656 105.34260466 -34.98878656 105.34260466 -33.97265625 103.41796875 C-22.08543779 74.28663081 -22.71072395 37.13601938 -34 8 C-34.66 7.01 -35.32 6.02 -36 5 C-36.66 5 -37.32 5 -38 5 Z " fill="#000000" transform="translate(541,49)" />
        </svg>

      </div>

      <Card className={`w-full max-w-md p-6 ${customStyles.card || ''}`}>
        <div className="text-center mb-6">
          <h1 className={`text-3xl font-bold bg-gradient-to-r from-${theme.primary}-600 to-${theme.secondary}-600 bg-clip-text text-transparent`}>
            Complete Your Profile
          </h1>
          <p className="text-muted-foreground mt-2">
            Please provide some additional details
          </p>
        </div>

        {error && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-6 p-4 bg-red-500/10 rounded-lg"
          >
            <p className="text-sm text-red-500 text-center">{error}</p>
          </motion.div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="firstName">First Name</Label>
            <Input
              id="firstName"
              value={userDetails.first_name}
              onChange={(e) => handleUserDetailsChange('first_name', e.target.value)}
              required
              disabled={loading}
              className={customStyles.input}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="lastName">Last Name</Label>
            <Input
              id="lastName"
              value={userDetails.last_name}
              onChange={(e) => handleUserDetailsChange('last_name', e.target.value)}
              required
              disabled={loading}
              className={customStyles.input}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">Email (optional)</Label>
            <Input
              id="email"
              type="email"
              value={userDetails.email}
              onChange={(e) => handleUserDetailsChange('email', e.target.value)}
              disabled={loading}
              className={customStyles.input}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="role">Role</Label>
            <Select
              value={userDetails.role}
              onValueChange={(value) => handleUserDetailsChange('role', value)}
              disabled={loading}
            >
              <SelectTrigger className={customStyles.select}>
                <SelectValue placeholder="Select role" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="User">User</SelectItem>
                <SelectItem value="Administrator">Administrator</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Button
            type="submit"
            className={`w-full ${customStyles.button || ''}`}
            disabled={loading}
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Please wait
              </>
            ) : (
              'Create Account'
            )}
          </Button>
        </form>

        <Button
          variant="ghost"
          className="mt-4 w-full"
          onClick={() => {
            setIsNewUser(false);
            setError(null);
          }}
          disabled={loading}
        >
          ← Back to Authentication
        </Button>
      </Card>
    </div>
  );
}